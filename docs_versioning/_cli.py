# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/Docs_Versioning.ipynb.

# %% auto 0
__all__ = ['delete_rc_docs']

# %% ../nbs/Docs_Versioning.ipynb 1
import subprocess
from pathlib import Path
from typing import *

import typer

# %% ../nbs/Docs_Versioning.ipynb 4
def _filter_rc_branches(all_branches: str) -> str:
    return "\n".join(
        [
            i.split(" ")[0]
            for i in all_branches.split("\n")
            if i != "" and not i.split(".")[-1].split(" ")[0].isdigit()
        ]
    )

# %% ../nbs/Docs_Versioning.ipynb 7
def _get_version_numbers(all_versions: str) -> str:
    return [v.split(" ")[0] for v in all_versions.split("\n")]

# %% ../nbs/Docs_Versioning.ipynb 9
def _filter_exclustion_list(versions_to_delete: List[str], exclude: str) -> List[str]:
    exclusion_list = [i.strip().split(" ")[0] for i in exclude.split(",")]
    return list(set(versions_to_delete) - set(exclusion_list))

# %% ../nbs/Docs_Versioning.ipynb 11
def _add_git_args(cmd: list[str], rebase: bool, ignore: bool, prefix: str) -> List[str]:
    if rebase: 
        cmd = cmd + ["--rebase"]
    if ignore:
        cmd = cmd + ["--ignore"]
    if prefix:
        cmd = cmd + ["--prefix", prefix]
        
    return cmd
    

# %% ../nbs/Docs_Versioning.ipynb 13
_app = typer.Typer(help="")

@_app.command(
    help="Delete the deployed release candidate documentations.",
)
def delete_rc_docs(
    branch: str = typer.Option(
            "gh-pages",
            "--branch",
            "-b",
            help='The branch name to commit to',
        ),
    remote: str = typer.Option(
            "origin",
            "--remote",
            "-r",
            help='The origin name to push to',
        ),
    config_file: str = typer.Option(
            "mkdocs/mkdocs.yml",
            "--config-file",
            "-F",
            help='The MkDocs configuration file to use',
        ),
    rebase: bool = typer.Option(
            True,
            help='Rebase with remote brancj',
        ),
    ignore: bool = typer.Option(
            False,
            help='Ignore remote status',
        ),
    prefix: str = typer.Option(
            None,
            "--prefix",
            help='subdirectory within {branch} where docs are located',
        ),
) -> None:
    """Delete the deployed release candidate documentations."""
    try:
        cmd = ['-b', branch, '-r', remote, '-F', config_file]
        cmd = _add_git_args(cmd, rebase, ignore, prefix)
        nl = "\n"
                
        result = subprocess.run(['mike', 'list'] + cmd, stdout=subprocess.PIPE)
        deployed_docs_list = result.stdout.decode('utf-8')
        deployed_docs_list = _filter_rc_branches(deployed_docs_list)
        
        if deployed_docs_list == "":
            typer.echo("No release candidate documentation versions have been deployed.")
            return
        
        typer.echo(f"List of deployed release candidate documentation versions: \n{deployed_docs_list}\n")        
        option = typer.prompt("\nSelect an option: \n1. Delete all versions listed above \n2. Retain some versions while deleting others \n3. Abort\n\n")
        
        if option == "3":
            typer.echo("Aborted.")
            return
        
        versions_to_delete = _get_version_numbers(deployed_docs_list)
        if option == "2":
            while True:
                exclude = typer.prompt("Enter the names of the versions to retain, separated by comma (eg: 1.0.0rc0, 1.0.0rc1)")
                versions_to_delete = _filter_exclustion_list(_get_version_numbers(deployed_docs_list), exclude)
                typer.echo(f'Modified list of deployed release candidate documentation versions:\n{nl.join(versions_to_delete)}')
                delete = typer.confirm("Delete the above version(s)?")
                if delete:
                    break
            
        if len(versions_to_delete) == 0:
            typer.echo("No release candidate documentation version found to delete.")
        else:
            cmd = versions_to_delete + ['-b', branch, '-r', remote, '-F', config_file, '--push', '--force']
            cmd = _add_git_args(cmd, rebase, ignore, prefix)

            result = subprocess.run(['mike', 'delete'] + cmd, stdout=subprocess.PIPE)
            if result.returncode == 0:
                typer.echo(f"\nSuccessfully deleted the below version(s):\n{nl.join(versions_to_delete)}")
        
    except Exception as e:
        typer.secho(f"Unexpected internal error: {e}", err=True, fg=typer.colors.RED)
        raise typer.Exit(1)
